typeValue ::= [
   "integer":"int",
   "real":"double",
   "boolean":"boolean",
   default:"null"
]

]
main(name,stat) ::= <<
import Shared.*;

public class <name> {
   public static void main(String[] args){
      <stats(stat)>
   }
}

>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

assignment(stat,var,value) ::= <<
   <stats(stat)>
   <var> = <value>;
>>

init(value) ::= "<if(value)> = <value><endif>"
decl(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"

show(stat,type,expr) ::= <<
<stats(stat)>
printf("<typeFormat.(type)>\n", <expr>);
>>

conditional(stat,var,stat_true,stat_false) ::= <<
<stats(stat)>
if (!<var>) goto L<var>1;
<stats(stat_true)>
goto L<var>2;
L<var>1:;
<if(stat_false)>
<stats(stat_false)>
<endif>
L<var>2:;
>>

binaryExpression(stat,type,var,e1,op,e2) ::= <<
<stats(stat)>
<decl(type,var,[e1," ",op," ",e2])>
>>

powerTypeCast ::= [
   "integer":"(int)",
   "real":"",
   default:"null"
]

powerExpression(type,var,e1,e2) ::= "<decl(type,var,[powerTypeCast.(type),\"pow(\",e1,\",\",e2,\")\"])>"

literalBoolean(value) ::= "<booleanValue.(value)>"


